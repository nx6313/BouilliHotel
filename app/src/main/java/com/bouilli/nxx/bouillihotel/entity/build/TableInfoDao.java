package com.bouilli.nxx.bouillihotel.entity.build;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bouilli.nxx.bouillihotel.entity.TableInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_INFO".
*/
public class TableInfoDao extends AbstractDao<TableInfo, Long> {

    public static final String TABLENAME = "TABLE_INFO";

    /**
     * Properties of entity TableInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupCode = new Property(1, String.class, "groupCode", false, "GROUP_CODE");
        public final static Property TableNo = new Property(2, String.class, "tableNo", false, "TABLE_NO");
        public final static Property TableName = new Property(3, String.class, "tableName", false, "TABLE_NAME");
        public final static Property TableStatus = new Property(4, Integer.class, "tableStatus", false, "TABLE_STATUS");
    }


    public TableInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TableInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_CODE\" TEXT," + // 1: groupCode
                "\"TABLE_NO\" TEXT," + // 2: tableNo
                "\"TABLE_NAME\" TEXT," + // 3: tableName
                "\"TABLE_STATUS\" INTEGER);"); // 4: tableStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupCode = entity.getGroupCode();
        if (groupCode != null) {
            stmt.bindString(2, groupCode);
        }
 
        String tableNo = entity.getTableNo();
        if (tableNo != null) {
            stmt.bindString(3, tableNo);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(4, tableName);
        }
 
        Integer tableStatus = entity.getTableStatus();
        if (tableStatus != null) {
            stmt.bindLong(5, tableStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupCode = entity.getGroupCode();
        if (groupCode != null) {
            stmt.bindString(2, groupCode);
        }
 
        String tableNo = entity.getTableNo();
        if (tableNo != null) {
            stmt.bindString(3, tableNo);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(4, tableName);
        }
 
        Integer tableStatus = entity.getTableStatus();
        if (tableStatus != null) {
            stmt.bindLong(5, tableStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TableInfo readEntity(Cursor cursor, int offset) {
        TableInfo entity = new TableInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tableNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tableName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // tableStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TableInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTableNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTableName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTableStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TableInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TableInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TableInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
